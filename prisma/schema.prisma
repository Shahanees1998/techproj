// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Permission {
  CREATE_USER
  READ_USER
  UPDATE_USER
  DELETE_USER
  READ_ALL_USERS
  UPDATE_ALL_USERS
  DELETE_ALL_USERS
  CREATE_PROJECT
  READ_PROJECT
  UPDATE_PROJECT
  DELETE_PROJECT
  CREATE_JOB
  READ_JOB
  UPDATE_JOB
  DELETE_JOB
  CREATE_CLIENT
  READ_CLIENT
  UPDATE_CLIENT
  DELETE_CLIENT
  MANAGE_SCHEDULES
  MANAGE_PAYROLL
  MANAGE_INVOICES
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
}

enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
}

enum LogType {
  READ
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  ASSIGN
  UNASSIGN
  STATUS_CHANGE
  INVOICE_GENERATE
  PAYROLL_PROCESS
}

enum LogEntity {
  USER
  CLIENT
  PROJECT
  JOB
  SCHEDULE
  INVOICE
  PAYROLL
}

model Role {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  permissions Permission[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  roleId    String   @db.ObjectId  // Changed from role enum to roleId
  clientId  String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Virtual Relations
  role          Role          @relation(fields: [roleId], references: [id])
  client        Client?       @relation(fields: [clientId], references: [id])
  projects      Project[]     @relation(fields: [projectIds], references: [id])
  projectIds    String[]      @db.ObjectId
  assignedJobs   Job[]         @relation("AssignedTechnicians", fields: [assignedJobIds], references: [id])
  assignedJobIds String[]      @db.ObjectId
  leadJobs       Job[]         @relation("LeadTechnicians", fields: [leadJobIds], references: [id])
  leadJobIds     String[]      @db.ObjectId
  activityLogs   ActivityLog[] // Added relation to activity logs
  payrolls       Payroll[] // Added missing relation
}

model Client {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  address   String
  phone     String
  users     User[] // CP and IP users
  projects  Project[]
  invoices  Invoice[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  status      ProjectStatus
  startDate   DateTime
  endDate     DateTime?
  clientId    String        @db.ObjectId
  teamIds     String[]      @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Virtual Relations
  client Client @relation(fields: [clientId], references: [id])
  team   User[] @relation(fields: [teamIds], references: [id])
  jobs   Job[]
}

model Job {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  status        JobStatus
  startDate     DateTime
  endDate       DateTime?
  projectId     String    @db.ObjectId
  leadTechIds   String[]  @db.ObjectId // Changed to array for multiple lead technicians
  technicianIds String[]  @db.ObjectId
  scheduleIds   String[]  @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Virtual Relations
  project         Project    @relation(fields: [projectId], references: [id])
  leadTechnicians User[]     @relation("LeadTechnicians", fields: [leadTechIds], references: [id]) // Updated relation
  technicians     User[]     @relation("AssignedTechnicians", fields: [technicianIds], references: [id])
  schedules       Schedule[] @relation(fields: [scheduleIds], references: [id])
  invoices        Invoice[]
}

model Schedule {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime
  jobIds      String[] @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Virtual Relations
  jobs Job[] @relation(fields: [jobIds], references: [id])
}

model Invoice {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  number    String        @unique
  amount    Float
  status    InvoiceStatus
  issueDate DateTime
  dueDate   DateTime
  jobId     String        @db.ObjectId
  clientId  String        @db.ObjectId // Added client relation
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Virtual Relations
  job    Job    @relation(fields: [jobId], references: [id])
  client Client @relation(fields: [clientId], references: [id]) // Added client relation
}

model Payroll {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  startDate    DateTime
  endDate      DateTime
  amount       Float
  status       PayrollStatus
  technicianId String        @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Virtual Relations
  technician User @relation(fields: [technicianId], references: [id])
}

model ActivityLog {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        LogType
  entity      LogEntity
  entityId    String    @db.ObjectId
  userId      String    @db.ObjectId
  description String
  metadata    Json? // For storing additional context
  createdAt   DateTime  @default(now())

  // Virtual Relations
  user User @relation(fields: [userId], references: [id])
}
